{"version":3,"sources":["serviceWorker.js","index.js","App.js","useBookSearch.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","query","setQuery","pageNumber","setPageNumber","loading","setLoading","error","setError","books","setBooks","hasMore","setHasMore","useEffect","cancel","axios","method","url","params","q","page","cancelToken","CancelToken","c","then","res","prevBooks","Set","data","docs","map","b","title","length","catch","e","isCancel","useBookSearch","observer","useRef","lastBookElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","console","log","prevPageNumber","observe","className","type","value","onChange","target","book","index","ref","key","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uTAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCFD,WAAgB,IAAD,EACFC,mBAAS,IADP,mBACrBC,EADqB,KACdC,EADc,OAEQF,mBAAS,GAFjB,mBAErBG,EAFqB,KAETC,EAFS,OCDf,SAAuBH,EAAOE,GAAa,IAAD,EACzBH,oBAAS,GADgB,mBAChDK,EADgD,KACvCC,EADuC,OAE7BN,oBAAS,GAFoB,mBAEhDO,EAFgD,KAEzCC,EAFyC,OAG7BR,mBAAS,IAHoB,mBAGhDS,EAHgD,KAGzCC,EAHyC,OAIzBV,oBAAS,GAJgB,mBAIhDW,EAJgD,KAIvCC,EAJuC,KAuCvD,OAjCAC,qBAAU,WACRH,EAAS,MACR,CAACT,IAEJY,qBAAU,WAGR,IAAIC,EAuBJ,OAzBAR,GAAW,GACXE,GAAS,GAETO,IAAM,CACJC,OAAQ,MACRC,IAAK,sCACLC,OAAQ,CAAEC,EAAGlB,EAAOmB,KAAMjB,GAC1BkB,YAAa,IAAIN,IAAMO,aAAY,SAAAC,GAAC,OAAIT,EAASS,OAChDC,MAAK,SAAAC,GAQNf,GAAS,SAAAgB,GACP,OAAO,YAAI,IAAIC,IAAJ,sBAAYD,GAAZ,YAA0BD,EAAIG,KAAKC,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,gBAEhEpB,EAAWa,EAAIG,KAAKC,KAAKI,OAAS,GAClC3B,GAAW,MACV4B,OAAM,SAAAC,GACHpB,IAAMqB,SAASD,IACnB3B,GAAS,MAEJ,kBAAMM,OACZ,CAACb,EAAOE,IAEJ,CAAEE,UAASE,QAAOE,QAAOE,WDlCW0B,CAAcpC,EAAOE,GAAxDM,EAJoB,EAIpBA,MAAOE,EAJa,EAIbA,QAASN,EAJI,EAIJA,QAASE,EAJL,EAIKA,MAwB3B+B,EAAWC,mBAWXC,EAAqBC,uBACzB,SAAAC,GACMrC,IAIAiC,EAASK,SAASL,EAASK,QAAQC,aACvCN,EAASK,QAAU,IAAIE,sBAAqB,SAAAC,GACtCA,EAAQ,GAAGC,gBAAkBpC,IAC/BqC,QAAQC,IAAI,WACZ7C,GAAc,SAAA8C,GAAc,OAAIA,EAAiB,SAGjDR,GAAMJ,EAASK,QAAQQ,QAAQT,MAErC,CAACrC,EAASM,IAQZ,OACE,oCACE,yBAAKyC,UAAU,SACb,2BACEC,KAAK,OACLC,MAAOrD,EACPsD,SAXR,SAAsBpB,GACpBjC,EAASiC,EAAEqB,OAAOF,OAClBlD,EAAc,IAURgD,UAAU,eAGd,yBAAKA,UAAU,aAEX3C,EAAMqB,KAAI,SAAC2B,EAAMC,GACf,OAAIjD,EAAMwB,SAAWyB,EAAQ,EAEzB,yBAAKN,UAAU,OAAOO,IAAKnB,EAAoBoB,IAAKH,GACjDA,GAIE,yBAAKL,UAAU,OAAOQ,IAAKH,GAAOA,OAKjC,IAAZpD,EAAmB,yBAAK+C,UAAU,WAAf,cAA4C,KAEjE,yBAAKA,UAAU,SAAS7C,GAAS,aDvFzB,MAASsD,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdjC,OAAM,SAAA3B,GACLyC,QAAQzC,MAAMA,EAAM6D,c","file":"static/js/main.a72eb6d4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useRef, useCallback } from \"react\";\nimport useBookSearch from \"./useBookSearch\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [query, setQuery] = useState(\"\");\n  const [pageNumber, setPageNumber] = useState(1);\n\n  const { books, hasMore, loading, error } = useBookSearch(query, pageNumber);\n\n  /**ref is a value that persists after each render\n   * because inside of react every single thing that we do is only stored inside that render\n   * unless it's part of state\n   * but if we wanna store something between renders that isn't part of our state,\n   * we need to use ref\n   * and ref is good when you need to store references to element\n   * for example if we wanna get a reference to our books element or input element\n   * or if you wanna reference to something related to the document API\n   * and in this case, we are using intersection observer\n   * which is part of the document API\n   */\n\n   /**first time this gets ran,\n    * this is gonna have undefined as the value\n    * which is okay\n    *\n    * useRef is not part of our state\n    * so it doesn't update every single time that it changes\n    * so when our reference changes,\n    * it doesn't rerun our component\n    * so we will use 'useCallback' which has a really unique interaction with useRef\n    */\n  const observer = useRef();\n  /**and we also need to get a reference to the very last book element\n   * because we are gonna make it scroll all the way down\n   * and that our very last book element is shown on the screen,\n   * and then we change our page number and add one to it\n   *\n   * so intersection observer is gonna allow us to say\n   * when something's on our screen\n   * but we need to get an element reference to that very last element in our books array\n   * in order to know which element is the last one\n  */\n  const lastBookElementRef = useCallback(\n    node => {\n      if (loading) return;\n      /**this gonna disconnect our observer from the previous element\n       * last element will be hooked up correct\n       */\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver(entries => {\n        if (entries[0].isIntersecting && hasMore) {\n          console.log('visible')\n          setPageNumber(prevPageNumber => prevPageNumber + 1);\n        }\n      });\n      if (node) observer.current.observe(node);\n    },\n    [loading, hasMore]\n  );\n\n  function handleSearch(e) {\n    setQuery(e.target.value);\n    setPageNumber(1);\n  }\n\n  return (\n    <>\n      <div className=\"input\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={handleSearch}\n          className=\"inputText\"\n        />\n      </div>\n      <div className=\"inputList\">\n        {\n          books.map((book, index) => {\n            if (books.length === index + 1) {\n              return (\n                <div className=\"book\" ref={lastBookElementRef} key={book}>\n                  {book}\n                </div>\n              );\n            } else {\n              return <div className=\"book\" key={book}>{book}</div>;\n            }\n          })\n        }\n        {\n          loading === true ? <div className=\"loading\">Loading...</div> : null\n        }\n        <div className=\"error\">{error && \"Error\"}</div>\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nexport default function useBookSearch(query, pageNumber) {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(false)\n  const [books, setBooks] = useState([])\n  const [hasMore, setHasMore] = useState(false)\n\n  useEffect(() => {\n    setBooks([])\n  }, [query])\n\n  useEffect(() => {\n    setLoading(true)\n    setError(false)\n    let cancel\n    axios({\n      method: 'GET',\n      url: 'https://openlibrary.org/search.json',\n      params: { q: query, page: pageNumber },\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res => {\n/**\n * when we get the multiple titles,\n * it might have same titles\n * so we will use 'Set'\n * and we wanna remove those\n * Set will return just unique values\n */\n      setBooks(prevBooks => {\n        return [...new Set([...prevBooks, ...res.data.docs.map(b => b.title)])]\n      })\n      setHasMore(res.data.docs.length > 0)\n      setLoading(false)\n    }).catch(e => {\n      if (axios.isCancel(e)) return\n      setError(true)\n    })\n    return () => cancel()\n  }, [query, pageNumber])\n\n  return { loading, error, books, hasMore }\n}"],"sourceRoot":""}